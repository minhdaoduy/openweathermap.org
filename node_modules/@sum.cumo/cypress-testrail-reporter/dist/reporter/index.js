"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFormattedErrorMessages = void 0;
const sleep_1 = __importDefault(require("../helper/sleep"));
const testCaseStatus_1 = require("../helper/testCaseStatus");
const printer_1 = __importDefault(require("../helper/printer"));
// eslint-disable-next-line @typescript-eslint/no-var-requires
const TestRailConnector = require('@sum.cumo/node-testrail');
function getFormattedErrorMessages(testCase) {
    var _a;
    if (((_a = testCase === null || testCase === void 0 ? void 0 : testCase.err) === null || _a === void 0 ? void 0 : _a.length) > 0) {
        const errorMessages = testCase.err.map((e) => e.message.replace('CypressError:', '**CypressError:**'));
        return errorMessages.join('\r\n');
    }
    return null;
}
exports.getFormattedErrorMessages = getFormattedErrorMessages;
class TestRailReporter {
    constructor(config, branchName, cases) {
        this.config = config;
        this.branchName = branchName;
        this.cases = cases;
        this.currentRun = null;
        this.setRefs();
        // Connect to API
        this.client = new TestRailConnector(config.host, config.user, config.password);
    }
    get hasCases() {
        return this.cases && this.cases.length > 0;
    }
    /**
     * Should only post results if cases were provided
     * @returns {boolean}
     */
    shouldPostResults() {
        return this.hasCases;
    }
    setRefs() {
        this.refs = null;
        const regex = this.getBranchReferenceRegex();
        if (regex !== null) {
            const refs = this.branchName.match(regex);
            if (refs) {
                this.refs = refs.map((ref) => ref.toUpperCase()).join(', ');
            }
        }
    }
    getBranchReferenceRegex() {
        if (this.config.branchReferenceRegex) {
            return new RegExp(this.config.branchReferenceRegex, 'gi');
        }
        return null;
    }
    getCoveredCases() {
        return this.cases.map((c) => c.caseId);
    }
    getTestRailResults() {
        return {
            results: this.cases.map((testCase) => ({
                case_id: testCase.caseId,
                status_id: testCaseStatus_1.getCombinedTestCaseStatusId(testCase.results),
                comment: getFormattedErrorMessages(testCase),
            })),
        };
    }
    // eslint-disable-next-line class-methods-use-this
    onError(e) {
        var _a, _b;
        throw new Error(((_b = (_a = e.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) || e);
    }
    findOrCreateRunByName(response) {
        return __awaiter(this, void 0, void 0, function* () {
            let run = response.runs.find((r) => r.name === this.branchName);
            const caseIds = this.getCoveredCases();
            printer_1.default('cids', caseIds);
            const description = `Cypress test run for ${this.branchName}`;
            // No Run Found?
            if (!run) {
                // Create Testrun for Branch
                printer_1.default(`Add Run ${this.branchName}`, caseIds);
                run = this.client
                    .addRun(this.config.projectId, this.config.suiteId, this.branchName, description, null, this.config.includeAll, caseIds, this.refs)
                    .then((result) => result.data)
                    .catch(this.onError);
            }
            else {
                // Update existing Testrun
                printer_1.default(`Update Run ${this.branchName}`, run.id, caseIds);
                const updateRunResponse = this.client
                    .updateRun(run.id, this.branchName, description, run.milestone_id, this.config.includeAll, caseIds, this.refs)
                    .then((result) => result.data)
                    .catch(this.onError);
                printer_1.default('Run updated', updateRunResponse);
            }
            // Wait 10 seconds before continuing to let testrail fully process the new / updated run
            yield sleep_1.default(10000);
            return run;
        });
    }
    findOrCreateRun() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return this.client
                    .getRuns(this.config.projectId, '&is_completed=0')
                    .then((response) => response.data)
                    .then(this.findOrCreateRunByName.bind(this))
                    .catch(this.onError);
            }
            catch (e) {
                throw new Error(e);
            }
        });
    }
    addResultsForCases() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.shouldPostResults()) {
                // Do we have a valid run?
                if (this.currentRun && this.currentRun.id) {
                    printer_1.default('POST', this.cases, this.currentRun.id);
                    // Add Results
                    try {
                        const result = yield this.client
                            .addResultsForCases(this.currentRun.id, this.getTestRailResults())
                            .then((response) => response.data)
                            .catch(this.onError);
                        if (!Array.isArray(result) || result.length === 0) {
                            printer_1.default('Post not successful', result);
                            return false;
                        }
                    }
                    catch (e) {
                        throw new Error(e);
                    }
                }
            }
            else {
                printer_1.default('SKIPPING');
            }
            return false;
        });
    }
    addAttachmentsToTestRun(attachments) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.client.addAttachmentsToRun((_a = this.currentRun) === null || _a === void 0 ? void 0 : _a.id, attachments);
        });
    }
    addAssetsToTestRun(assets, assetsArchiveName) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.client.addAttachmentsToRun((_a = this.currentRun) === null || _a === void 0 ? void 0 : _a.id, assets, assetsArchiveName);
        });
    }
    postResults(closeRun, attachments, assets, assetsArchiveName) {
        return __awaiter(this, void 0, void 0, function* () {
            // Fetch Runs from testrail
            this.currentRun = yield this.findOrCreateRun();
            yield this.addResultsForCases();
            yield this.addAttachmentsToTestRun(attachments);
            if (assets.length > 0 && assetsArchiveName) {
                yield this.addAssetsToTestRun(assets, assetsArchiveName);
            }
            if (closeRun) {
                printer_1.default('Close RUN');
                yield this.closeTestrailRun();
            }
        });
    }
    closeTestrailRun() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                printer_1.default(`closeRun ${(_a = this.currentRun) === null || _a === void 0 ? void 0 : _a.id}`);
                yield this.client
                    .closeRun((_b = this.currentRun) === null || _b === void 0 ? void 0 : _b.id)
                    .catch(this.onError);
                this.currentRun = null;
            }
            catch (e) {
                throw new Error(e);
            }
        });
    }
}
exports.default = TestRailReporter;
