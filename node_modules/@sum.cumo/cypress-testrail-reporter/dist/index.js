#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const readConfig_1 = __importDefault(require("./helper/readConfig"));
const parser_1 = __importDefault(require("./parser"));
const reporter_1 = __importDefault(require("./reporter"));
const printer_1 = __importDefault(require("./helper/printer"));
// eslint-disable-next-line @typescript-eslint/no-var-requires
const yargs = require('yargs');
const config = readConfig_1.default();
yargs
    .command('$0', 'Report Cypress Test Results to Testrail')
    .usage('Usage: $0 <command> [options]')
    .option('name', {
    demandOption: true,
    describe: 'Name of the Test Run',
    type: 'string',
})
    .option('suiteId', {
    demandOption: false,
    describe: 'related Testrail Suite Id',
    type: 'string',
    default: (config === null || config === void 0 ? void 0 : config.suiteId) || null,
})
    .option('reportFilename', {
    demandOption: false,
    describe: 'Cypress Result as json file - can also be defined within your cypress.json testrailReporter section',
    type: 'string',
    default: config === null || config === void 0 ? void 0 : config.reportFilename,
})
    .option('closeRun', {
    demandOption: false,
    default: false,
    describe: 'Flag to close the testrail run after reporting',
    type: 'boolean',
})
    .option('host', {
    demandOption: true,
    describe: 'Testrail Host (eg. https://example.testrail.io/) - can also be defined within your cypress.json testrailReporter section',
    type: 'string',
    default: config === null || config === void 0 ? void 0 : config.host,
})
    .option('username', {
    demandOption: true,
    describe: 'Testrail Username - can also be defined within your cypress.json testrailReporter section',
    type: 'string',
    default: config === null || config === void 0 ? void 0 : config.user,
})
    .option('password', {
    demandOption: true,
    describe: 'Testrail Password - can also be defined within your cypress.json testrailReporter section',
    type: 'string',
    default: config === null || config === void 0 ? void 0 : config.password,
})
    .option('assets', {
    demandOption: false,
    describe: 'Should Cypress Videos / Screenshots be uploaded and attached to the current run?',
    type: 'array',
    default: [],
})
    .option('assetsArchiveName', {
    demandOption: false,
    describe: 'Provide a name for your assets Archive. Default: cypressAssets',
    type: 'string',
    default: 'cypressAssets',
})
    .option('attach', {
    demandOption: false,
    describe: 'Do you have files you want to attach to this run?',
    type: 'array',
    default: [],
})
    .option('includeAll', {
    demandOption: false,
    describe: 'Whether include all test cases of the test suite',
    type: 'boolean',
    default: config.includeAll,
})
    .help();
const { name, reportFilename, closeRun, attach, } = yargs.argv;
printer_1.default('Start Test Rail Export', name, reportFilename, closeRun, attach, yargs.argv.assets);
const defaultConfig = {
    includeAll: false,
};
// // ParseCypressResults
parser_1.default(reportFilename)
    .then((parsedTestResults) => __awaiter(void 0, void 0, void 0, function* () {
    printer_1.default('Test results parsed');
    printer_1.default('Passed:', parsedTestResults.analysis.passed);
    printer_1.default('Skipped:', parsedTestResults.analysis.skipped);
    printer_1.default('Failed:', parsedTestResults.analysis.failed);
    printer_1.default('parsedTestResults', JSON.stringify(parsedTestResults));
    // post Results to testrail
    try {
        const reporter = new reporter_1.default(Object.assign(Object.assign(Object.assign({}, defaultConfig), config), { user: yargs.argv.username, password: yargs.argv.password, host: yargs.argv.host, suiteId: yargs.argv.suiteId }), name, parsedTestResults.testRailCases);
        yield reporter.postResults(closeRun, yargs.argv.attach, yargs.argv.assets, yargs.argv.assetsArchiveName);
    }
    catch (e) {
        printer_1.default('Posting Failed', e);
        process.exit(1);
    }
}))
    .catch((e) => {
    printer_1.default('Failed', e);
    process.exit(1);
});
